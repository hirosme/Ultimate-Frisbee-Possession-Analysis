if (possession@summary$Scored. == 1) {
score_count = score_count + 1
}
}
return(list(possession_count,score_count))
}
## given a tournament object return its score rate, and number of opportunities
tournament_score_rate = function(tournament) {
possession_count = 0
score_count = 0
for (game in tournament@games) {
game_counts = game_score_data(game)
possession_count = possession_count + game_counts[[1]]
score_count = score_count + game_counts[[2]]
}
return(list(score_count/possession_count,possession_count))
}
## generate 2 matrices based on field location of throws. 1st matrix is number of throws from each loc. 2nd matrix is number of scores of possessions that hit each field spot
game_loc_data = function(game_obj, row=14, col=8) {
x_axis = seq(0,1,1/row)
y_axis = seq(0,1,1/col)
## matrix of number of throws from each index
throw_count = matrix(0,row,col)
## matrix of number of scores on possessions from each index
score_count = matrix(0,row,col)
## iterate over possessions
for (poss in game_obj@possessions) {
## iterate over throws
for (i in 1:nrow(poss@throws)) {
throw = poss@throws[i,]
x_pos = throw$Start.X..0....1...left.sideline....right.sideline.
y_pos = throw$Start.Y..0....1...back.of.opponent.endzone....back.of.own.endzone.
## calculate matrix index of throw
for (i in 1:row) {
if ((x_pos >= ((i-1)/row)) & (x_pos < (i/row))) {
x_index = i
}
}
for (j in 1:col) {
if (y_pos >= (j-1)/col & y_pos < j/col) {
y_index = j
}
}
## update matrices
throw_count[x_index,y_index] = throw_count[x_index,y_index] + 1
scored = poss@summary$Scored.
score_count[x_index,y_index] = score_count[x_index,y_index] + scored
}
}
return(list(throw_count,score_count))
}
## generates score count and throw count matrices for tournament
tournament_loc_data = function(tournament, row=14, col=8) {
throw_count = matrix(0,row,col)
score_count = matrix(0,row,col)
for (game in tournament@games) {
game_counts = game_loc_data(game, row, col)
throw_count = throw_count + game_counts[[1]]
score_count = score_count + game_counts[[2]]
}
return(list(throw_count,score_count))
}
## generates heat-map and score rate matrix given 2 matrices as created in game_loc_data
score_rate_map = function(throw_count, score_count) {
## combined matrices into probability matrix
score_rate = score_count/throw_count
score_rate[is.na(score_rate)] = 0
melted_score_rate = melt(score_rate)
print(
ggplot(data = melted_score_rate, aes(y=Var1, x=Var2, fill=value)) +
labs(x="yards from left sideline / 5",y="yards from target endzone / 5",
title="Possession Score Probability by Field Location") +
geom_tile() +
scale_fill_gradient2(low = "white", high = "red", mid = "yellow",
midpoint = .5, limit = c(0,1), space = "Lab",
name="Score Probability") +
theme_minimal()
)
return(score_rate)
}
## generates heat-map for number of possessions for each zone
throw_count_map = function(throw_count) {
melted_throw_count = melt(throw_count)
print(
ggplot(data = melted_throw_count, aes(y=Var1, x=Var2, fill=value)) +
labs(x="yards from left sideline / 5",y="yards from target endzone / 5",
title="throw_count by Field Location") +
geom_tile() +
scale_fill_gradient2(low = "white", high = "red", mid = "yellow",
midpoint = max(throw_count)/3, limit = c(0,max(throw_count)), space = "Lab",
name="Throw Count") +
theme_minimal()
)
return(throw_count)
}
## running on full data
regionals_loc_data = tournament_loc_data(regionals_obj)
throw_count_map(regionals_loc_data[[1]])
score_rate_map(regionals_loc_data[[1]],regionals_loc_data[[2]])
View(regionals_D)
path = 'C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/Fall Regionals Stats'
## given path to tournament data folder return a list. Each index of list represents a game, and has the data.frames of the passes and then the possessions tables
parse_directory = function(path) {
dirs = list.dirs(path)
game_list = list()
for (i in dirs) {
files = list.files(i,full.names = TRUE)
passes_file = grep('Passes',files,value=TRUE)
if(!is_empty(passes_file)) {
passes = read.csv(passes_file)
possessions_file = grep('Possessions',files,value=TRUE)
possessions = read.csv(possessions_file)
game = list(passes,possessions)
game_list = append(game_list,list(game))
}
}
return(game_list)
}
## takes in raw game-passes data.frame and returns Game object
game_split = function(passes) {
## initialize list of possessions
poss = list()
## rolling index of last turnover
turn_index = 0
## iterate over rows of data.frame and split on each turnover
for (i in 1:nrow(passes)) {
if (passes[i,]$Turnover. == 1 | passes[i,]$Throw.to.endzone. == 1) {
## generate possession object
poss_obj = new("Possession",
throws = passes[(turn_index + 1):i,])
poss = append(poss,poss_obj)
turn_index = i
}
}
## generate game object
game_obj = new("Game", possessions = poss)
return(game_obj)
}
## generates summary for a possession object, uses relevant game-possessions data.frame
poss_summary = function(poss_obj, possessions) {
#print(poss_obj)
## retrieve possession index from object
point_num = poss_obj@throws[1,]$Point
poss_num = poss_obj@throws[1,]$Possession
#print(point_num)
#print(poss_num)
## match rows of possessions df to possession index
poss_data = suppressWarnings(
subset(possessions,Point == point_num & Possession == poss_num)
)
return(poss_data)
}
## given game-passes and game-possessions data.frames generates Game object with possession objects
game_main = function(passes,possessions) {
game_obj = game_split(passes)
for (i in 1:length(game_obj@possessions)) {
game_obj@possessions[[i]]@summary = poss_summary(game_obj@possessions[[i]], possessions)
}
return(game_obj)
}
## given tournament folder, generate base tournament object
tournament_main = function(path) {
data = parse_directory(path)
game = list()
for (i in data) {
passes = i[[1]]
possessions = i[[2]]
game_obj = game_main(passes,possessions)
game = append(game, game_obj)
}
tournament_obj = new("Tournament", games = game)
}
#IU_game = game_main(IU_pass,IU_poss)
regionals_obj = tournament_main(path)
## Takes in a game object, variable, location of that variable (e.g. Passes or Possessions), and a set of values of that variable to search for. Returns a separate game object for each given value of the variable.
## Currently only set up to handle Possessions
game_split = function(game, var, var_loc, values) {
## Create list of lists. Each nested list will contain the possessions at a different value
ll = rep(0,length(values))
ll = lapply(ll,function(x) {return(list())})
for (possession in game@possessions) {
## Possessions table handling (summary attribute of Possessions)
if (var_loc == "Possessions") {
## iterate over values and match possessions to the value of the given variable
for (i in 1:length(values)) {
if (possession@summary$var == values[i]) {
ll[[i]] = append(ll[[i]], possession)
}
}
}
## Passes table handling (throws attribute of Possessions)
#    if (var_loc == "Passes") {
#
#      for (i in 1:length(values)) {
#
#      }
#    }
}
## Convert list of lists to a list of Games
ll = lapply(ll, function(x) {
})
}
## Takes in a tournament object, variable, location of that variable (e.g. Passes or Possessions), and a set of values of that variable to search for. Returns a separate tournament object for each given value of the variable
tournament_split = function(tournament, var, var_loc, values) {
## generate list variable names for each given value
values_var_names = lapply(x,function(x) {
assign(paste("var_",x),list())
})
for (game in tournament@games) {
}
}
## splits a game object into 2 game objects, one for O, one for D
game_O_split = function(game){
game_O_possessions = list()
game_D_possessions = list()
for (possession in game@possessions) {
if (possession@summary$Started.point.on.offense. == 1) {
game_O_possessions = append(game_O_possessions,possession)
} else {
game_D_possessions = append(game_D_possessions,possession)
}
}
game_O = new("Game",possessions=game_O_possessions)
game_D = new("Game",possessions=game_D_possessions)
return(list(game_O,game_D))
}
## splits a tournament object into 2 tournament objects, one for O-line, one for D-line
tournament_O_split = function(tournament) {
tournament_O_games = list()
tournament_D_games = list()
for (game in tournament@games) {
games = game_O_split(game)
tournament_O_games = append(tournament_O_games,games[[1]])
tournament_D_games = append(tournament_D_games,games[[2]])
}
tournament_O = new("Tournament",games = tournament_O_games)
tournament_D = new("Tournament",games = tournament_D_games)
return(list(tournament_O,tournament_D))
}
regionals_O_split = tournament_O_split(regionals_obj)
regionals_O = regionals_O_split[[1]]
regionals_D = regionals_O_split[[2]]
## splits a game object into 2 game objects, one for hucks, one for no huck
game_huck_split = function(game){
game_huck_possessions = list()
game_no_huck_possessions = list()
for (possession in game@possessions) {
## check if possession was eligible for huck
max_dist = max(possession@throws$Start.Y..0....1...back.of.opponent.endzone....back.of.own.endzone.) * 70
if (max_dist >= 26) {
huck = 0
for (i in 1:nrow(possession@throws)) {
row = possession@throws[i,]
if (row$Huck. == 1) {
huck = 1
}
}
if (huck == 1) {
game_huck_possessions = append(game_huck_possessions,possession)
} else {
game_no_huck_possessions = append(game_no_huck_possessions,possession)
}
}
}
game_huck = new("Game",possessions=game_huck_possessions)
game_no_huck = new("Game",possessions=game_no_huck_possessions)
return(list(game_huck,game_no_huck))
}
## splits a tournament object into 2 tournament objects, one for huck possessions, one for no huck possessions
tournament_huck_split = function(tournament) {
tournament_huck_games = list()
tournament_no_huck_games = list()
for (game in tournament@games) {
games = game_huck_split(game)
tournament_huck_games = append(tournament_huck_games,games[[1]])
tournament_no_huck_games = append(tournament_no_huck_games,games[[2]])
}
tournament_huck = new("Tournament",games = tournament_huck_games)
tournament_no_huck = new("Tournament",games = tournament_no_huck_games)
return(list(tournament_huck,tournament_no_huck))
}
regionals_huck_split = tournament_huck_split(regionals_obj)
regionals_huck = regionals_huck_split[[1]]
regionals_no_huck = regionals_huck_split[[2]]
## given a game object return its score total and possession total
game_score_data = function(game) {
possession_count = 0
score_count = 0
for (possession in game@possessions) {
possession_count = possession_count + 1
if (possession@summary$Scored. == 1) {
score_count = score_count + 1
}
}
return(list(possession_count,score_count))
}
## given a tournament object return its score rate, and number of opportunities
tournament_score_rate = function(tournament) {
possession_count = 0
score_count = 0
for (game in tournament@games) {
game_counts = game_score_data(game)
possession_count = possession_count + game_counts[[1]]
score_count = score_count + game_counts[[2]]
}
return(list(score_count/possession_count,possession_count))
}
## generate 2 matrices based on field location of throws. 1st matrix is number of throws from each loc. 2nd matrix is number of scores of possessions that hit each field spot
game_loc_data = function(game_obj, row=14, col=8) {
x_axis = seq(0,1,1/row)
y_axis = seq(0,1,1/col)
## matrix of number of throws from each index
throw_count = matrix(0,row,col)
## matrix of number of scores on possessions from each index
score_count = matrix(0,row,col)
## iterate over possessions
for (poss in game_obj@possessions) {
## iterate over throws
for (i in 1:nrow(poss@throws)) {
throw = poss@throws[i,]
x_pos = throw$Start.X..0....1...left.sideline....right.sideline.
y_pos = throw$Start.Y..0....1...back.of.opponent.endzone....back.of.own.endzone.
## calculate matrix index of throw
for (i in 1:row) {
if ((x_pos >= ((i-1)/row)) & (x_pos < (i/row))) {
x_index = i
}
}
for (j in 1:col) {
if (y_pos >= (j-1)/col & y_pos < j/col) {
y_index = j
}
}
## update matrices
throw_count[x_index,y_index] = throw_count[x_index,y_index] + 1
scored = poss@summary$Scored.
score_count[x_index,y_index] = score_count[x_index,y_index] + scored
}
}
return(list(throw_count,score_count))
}
## generates score count and throw count matrices for tournament
tournament_loc_data = function(tournament, row=14, col=8) {
throw_count = matrix(0,row,col)
score_count = matrix(0,row,col)
for (game in tournament@games) {
game_counts = game_loc_data(game, row, col)
throw_count = throw_count + game_counts[[1]]
score_count = score_count + game_counts[[2]]
}
return(list(throw_count,score_count))
}
## generates heat-map and score rate matrix given 2 matrices as created in game_loc_data
score_rate_map = function(throw_count, score_count) {
## combined matrices into probability matrix
score_rate = score_count/throw_count
score_rate[is.na(score_rate)] = 0
melted_score_rate = melt(score_rate)
print(
ggplot(data = melted_score_rate, aes(y=Var1, x=Var2, fill=value)) +
labs(x="yards from left sideline / 5",y="yards from target endzone / 5",
title="Possession Score Probability by Field Location") +
geom_tile() +
scale_fill_gradient2(low = "white", high = "red", mid = "yellow",
midpoint = .5, limit = c(0,1), space = "Lab",
name="Score Probability") +
theme_minimal()
)
return(score_rate)
}
## generates heat-map for number of possessions for each zone
throw_count_map = function(throw_count) {
melted_throw_count = melt(throw_count)
print(
ggplot(data = melted_throw_count, aes(y=Var1, x=Var2, fill=value)) +
labs(x="yards from left sideline / 5",y="yards from target endzone / 5",
title="throw_count by Field Location") +
geom_tile() +
scale_fill_gradient2(low = "white", high = "red", mid = "yellow",
midpoint = max(throw_count)/3, limit = c(0,max(throw_count)), space = "Lab",
name="Throw Count") +
theme_minimal()
)
return(throw_count)
}
## running on full data
regionals_loc_data = tournament_loc_data(regionals_obj)
throw_count_map(regionals_loc_data[[1]])
score_rate_map(regionals_loc_data[[1]],regionals_loc_data[[2]])
library(shiny); runApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/audl-possession-mapping/audl-shiny.R')
runApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/audl-possession-mapping/audl-shiny.R')
l = c(1376,1287,1220,1173,1136)
x = c(1,2,3,4,5)
fit = lm(l~x)
summary(fit
)
plot(l,x)
plot(l,x)
fit = lm(l~a*e^(-bx))
View(fit)
l = c(194,783,1029,457,614,1124,1312)
x = c(1,2,3,4,5,6,7)
fit = lm(l~x
summary(fit
)
fit = lm(l~x)
summary(fit)
plot(l,x)
x = c(7,6,5,4,3,2,1)
fit = lm(l~x)
summary(fit)
plot(l,x)
mean(l)
View(fit)
l = c(194,783,1029,457,614)
x = c(5,4,3,2,1)
fit = lm(l~x)
summary(fit)
plot(l,x)
mean(l)
View(fit)
library(shiny); runApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/audl-possession-mapping/audl-shiny.R')
runApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/audl-possession-mapping/audl-shiny.R')
runApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/audl-possession-mapping/audl-shiny.R')
runApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/audl-possession-mapping/audl-shiny.R')
runApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/audl-possession-mapping/audl-shiny.R')
runApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/audl-possession-mapping/audl-shiny.R')
library(shiny); runApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/UltiMaps/audl-shiny.R')
runApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/UltiMaps/audl-shiny.R')
runApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/UltiMaps/audl-shiny.R')
runApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/UltiMaps/audl-shiny.R')
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/audl/throw_score-%.R', echo=TRUE)
View(arr)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/audl/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/audl/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/audl/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/audl/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/audl/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/audl/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/audl/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/audl/throw_score-%.R', echo=TRUE)
View(arr)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/audl/throw_score-%.R', echo=TRUE)
View(arr)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/audl/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/audl/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/audl/throw_score-%.R', echo=TRUE)
View(arr)
hist(arr$Average_Neighbor_Dist)
quantile(arr$Average_Neighbor_Dist)
quantile(arr$Average_Neighbor_Dist,na.rm = TRUE)
arr$Accuracy = apply(arr[,12],1,function(x) {
if (x < .575) {return ('High')}
else if (x < 1.163) {return ('Medium')}
else {return('Low')}
})
arr$Accuracy = apply(arr[1,12],1,function(x) {
if (x < .575) {return ('High')}
else if (x < 1.163) {return ('Medium')}
else {return('Low')}
})
arr$Accuracy = apply(arr,1,function(x) {
x = x[,12]
if (x < .575) {return ('High')}
else if (x < 1.163) {return ('Medium')}
else {return('Low')}
})
arr$Accuracy = apply(arr,1,function(x) {
x = x[12]
if (x < .575) {return ('High')}
else if (x < 1.163) {return ('Medium')}
else {return('Low')}
})
arr$Accuracy = apply(arr,1,function(x) {
x = as.numeric(x[12])
if (x < .575) {return ('High')}
else if (x < 1.163) {return ('Medium')}
else {return('Low')}
})
arr$Accuracy = apply(arr,1,function(x) {
x = as.numeric(x[12])
print(x)
print(type(x))
if (x < .575) {return ('High')}
else if (x < 1.163) {return ('Medium')}
else {return('Low')}
})
arr$Accuracy = apply(arr,1,function(x) {
x = as.numeric(x[12])
print(x)
print(class(x))
if (x < .575) {return ('High')}
else if (x < 1.163) {return ('Medium')}
else {return('Low')}
})
arr$Accuracy = apply(arr,1,function(x) {
x = as.numeric(x[12])
if (is.na(x)) {return(NA)}
else if (x < .575) {return ('High')}
else if (x < 1.163) {return ('Medium')}
else {return('Low')}
})
write.csv(arr, file = 'conditioned_score-%.csv', row.names = FALSE)
runApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/UltiMaps/audl-shiny.R')
runApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/UltiMaps/audl-shiny.R')
runApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/UltiMaps/audl-shiny.R')
runApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/UltiMaps/audl-shiny.R')
runApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/UltiMaps/audl-shiny.R')
runApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/UltiMaps/audl-shiny.R')
rsconnect::deployApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/UltiMaps')
rsconnect::deployApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/UltiMaps',appName = 'UltiMaps')
rsconnect::deployApp('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/apps/UltiMaps',appName = 'UltiMaps')
