tournament_O = new("Tournament",games = tournament_O_games)
tournament_D = new("Tournament",games = tournament_D_games)
return(list(tournament_O,tournament_D))
}
regionals_O_split = tournament_O_split(regionals_obj)
regionals_O = regionals_O_split[[1]]
regionals_D = regionals_O_split[[2]]
## splits a game object into 2 game objects, one for hucks, one for no huck
game_huck_split = function(game){
game_huck_possessions = list()
game_no_huck_possessions = list()
for (possession in game@possessions) {
## check if possession was eligible for huck
max_dist = max(possession@throws$Start.Y..0....1...back.of.opponent.endzone....back.of.own.endzone.) * 70
if (max_dist >= 26) {
huck = 0
for (i in 1:nrow(possession@throws)) {
row = possession@throws[i,]
if (row$Huck. == 1) {
huck = 1
}
}
if (huck == 1) {
game_huck_possessions = append(game_huck_possessions,possession)
} else {
game_no_huck_possessions = append(game_no_huck_possessions,possession)
}
}
}
game_huck = new("Game",possessions=game_huck_possessions)
game_no_huck = new("Game",possessions=game_no_huck_possessions)
return(list(game_huck,game_no_huck))
}
## splits a tournament object into 2 tournament objects, one for huck possessions, one for no huck possessions
tournament_huck_split = function(tournament) {
tournament_huck_games = list()
tournament_no_huck_games = list()
for (game in tournament@games) {
games = game_huck_split(game)
tournament_huck_games = append(tournament_huck_games,games[[1]])
tournament_no_huck_games = append(tournament_no_huck_games,games[[2]])
}
tournament_huck = new("Tournament",games = tournament_huck_games)
tournament_no_huck = new("Tournament",games = tournament_no_huck_games)
return(list(tournament_huck,tournament_no_huck))
}
regionals_huck_split = tournament_huck_split(regionals_obj)
regionals_huck = regionals_huck_split[[1]]
regionals_no_huck = regionals_huck_split[[2]]
## given a game object return its score total and possession total
game_score_data = function(game) {
possession_count = 0
score_count = 0
for (possession in game@possessions) {
possession_count = possession_count + 1
if (possession@summary$Scored. == 1) {
score_count = score_count + 1
}
}
return(list(possession_count,score_count))
}
## given a tournament object return its score rate, and number of opportunities
tournament_score_rate = function(tournament) {
possession_count = 0
score_count = 0
for (game in tournament@games) {
game_counts = game_score_data(game)
possession_count = possession_count + game_counts[[1]]
score_count = score_count + game_counts[[2]]
}
return(list(score_count/possession_count,possession_count))
}
## generate 2 matrices based on field location of throws. 1st matrix is number of throws from each loc. 2nd matrix is number of scores of possessions that hit each field spot
game_loc_data = function(game_obj, row=14, col=8) {
x_axis = seq(0,1,1/row)
y_axis = seq(0,1,1/col)
## matrix of number of throws from each index
throw_count = matrix(0,row,col)
## matrix of number of scores on possessions from each index
score_count = matrix(0,row,col)
## iterate over possessions
for (poss in game_obj@possessions) {
## iterate over throws
for (i in 1:nrow(poss@throws)) {
throw = poss@throws[i,]
x_pos = throw$Start.X..0....1...left.sideline....right.sideline.
y_pos = throw$Start.Y..0....1...back.of.opponent.endzone....back.of.own.endzone.
## calculate matrix index of throw
for (i in 1:row) {
if ((x_pos >= ((i-1)/row)) & (x_pos < (i/row))) {
x_index = i
}
}
for (j in 1:col) {
if (y_pos >= (j-1)/col & y_pos < j/col) {
y_index = j
}
}
## update matrices
throw_count[x_index,y_index] = throw_count[x_index,y_index] + 1
scored = poss@summary$Scored.
score_count[x_index,y_index] = score_count[x_index,y_index] + scored
}
}
return(list(throw_count,score_count))
}
## generates score count and throw count matrices for tournament
tournament_loc_data = function(tournament, row=14, col=8) {
throw_count = matrix(0,row,col)
score_count = matrix(0,row,col)
for (game in tournament@games) {
game_counts = game_loc_data(game, row, col)
throw_count = throw_count + game_counts[[1]]
score_count = score_count + game_counts[[2]]
}
return(list(throw_count,score_count))
}
## generates heat-map and score rate matrix given 2 matrices as created in game_loc_data
score_rate_map = function(throw_count, score_count) {
## combined matrices into probability matrix
score_rate = score_count/throw_count
score_rate[is.na(score_rate)] = 0
melted_score_rate = melt(score_rate)
print(
ggplot(data = melted_score_rate, aes(y=Var1, x=Var2, fill=value)) +
labs(x="yards from left sideline / 5",y="yards from target endzone / 5",
title="Possession Score Probability by Field Location") +
geom_tile() +
scale_fill_gradient2(low = "white", high = "red", mid = "yellow",
midpoint = .5, limit = c(0,1), space = "Lab",
name="Score Probability") +
theme_minimal()
)
return(score_rate)
}
## generates heat-map for number of possessions for each zone
throw_count_map = function(throw_count) {
melted_throw_count = melt(throw_count)
print(
ggplot(data = melted_throw_count, aes(y=Var1, x=Var2, fill=value)) +
labs(x="yards from left sideline / 5",y="yards from target endzone / 5",
title="throw_count by Field Location") +
geom_tile() +
scale_fill_gradient2(low = "white", high = "red", mid = "yellow",
midpoint = max(throw_count)/3, limit = c(0,max(throw_count)), space = "Lab",
name="Throw Count") +
theme_minimal()
)
return(throw_count)
}
## running on full data
regionals_loc_data = tournament_loc_data(regionals_obj)
throw_count_map(regionals_loc_data[[1]])
score_rate_map(regionals_loc_data[[1]],regionals_loc_data[[2]])
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/base_score-%.R', echo=TRUE)
library(plotly)
ggplotly(p, tooltip=c("x", "y","z"),
width = 600,
height = 800)
View(arr)
View(df)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
View(df)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
X_MIN = min(min(df$x_0),min(df$x_1))
X_MIN
X_MIN = min(c(min(df$x_0),min(df$x_1)))
min(df$x_1)
min(df$x_0)
hist(df$x_1)
max(df$x_1)
max(na.omit(df$x_1))
View(df[df$x_1==NA])
View(df[df$x_1=="2408"])
View(df[df$x_1==2408])
min(df$y_1)
df = read.csv(FILENAME) %>% na.omit()
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
View(arr[1,1,,])
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
a = c(1,2,3)
b = c(4,5,6)
c = c(7,8,9)
d = expand.grid(a,b,c)
View(d)
arr = expand.grid(1:NROWS,1:NCOLS,1:NROWS,1:NCOLS)
head(lapply(d,
function(x,y,z) {
x+y+z
}))
View(d)
head(sapply(d,
function(x,y,z) {
x+y+z
}))
class(d)
head(do.call(function(x,y,z) {x+y+z}),d)
head(apply(d,1,sum))
class(arr)
head_arr = head(arr)
View(head_arr)
arr = apply(hear_arr,2,function(l) {
score_prob_calc(l[1],l[2],l[3],l[4],df,k)
})
arr = apply(head_arr,2,function(l) {
score_prob_calc(l[1],l[2],l[3],l[4],df,k)
})
arr
arr = expand.grid(1:NROWS,1:NCOLS,1:NROWS,1:NCOLS)
head_arr = head(arr)
head_N_arr = apply(head_arr,2,function(l) {
score_prob_calc(l[1],l[2],l[3],l[4],df,k)
})
View(head_arr)
View(head_N_arr)
head_N_arr = apply(head_arr,1,function(l) {
score_prob_calc(l[1],l[2],l[3],l[4],df,k)
})
View(head_N_arr)
## returns probability of scoring given a pair of coordinates
score_prob_calc = function(x_0,y_0,x_1,y_1,df,k) {
print(c(x_0,y_0,x_1,y_1))
x_0_n = (x_0 - X_MIN) / (X_MAX - X_MIN)
y_0_n = (y_0 - Y_MIN) / (Y_MAX - Y_MIN)
x_1_n = (x_1 - X_MIN) / (X_MAX - X_MIN)
#print(x_1)
#print(x_1_n)
y_1_n = (y_1 - Y_MIN) / (Y_MAX - Y_MIN)
coord = as.data.frame(matrix(c(x_0_n,y_0_n,x_1_n,y_1_n),nrow = 1,ncol=4))
df_subset_n = as.data.frame(lapply(df[,4:7], normalize))
#print(head(df_subset_n))
knn_index = get.knnx(df_subset_n,coord,k)$nn.index
#print(knn_index)
score_count = 0
for (i in 1:k) {
#print(df[knn_index[1,i],])
score_count = score_count + df[knn_index[1,i],]$Possession_outcome
}
return(score_count/k)
}
head_N_arr = apply(head_arr,1,function(l) {
score_prob_calc(l[1],l[2],l[3],l[4],df,k)
})
arr = expand.grid(1:NROWS,1:NCOLS,1:NROWS,1:NCOLS)
head_arr = head(arr[1:1000])
arr = expand.grid(1:NROWS,1:NCOLS,1:NROWS,1:NCOLS)
head_arr = head(arr[1:1000])
head_arr = arr[1:1000]
head_arr = arr[1:1000,]
View(head_arr)
## returns probability of scoring given a pair of coordinates
score_prob_calc = function(x_0,y_0,x_1,y_1,df,k) {
x_0_n = (x_0 - X_MIN) / (X_MAX - X_MIN)
y_0_n = (y_0 - Y_MIN) / (Y_MAX - Y_MIN)
x_1_n = (x_1 - X_MIN) / (X_MAX - X_MIN)
y_1_n = (y_1 - Y_MIN) / (Y_MAX - Y_MIN)
coord = as.data.frame(matrix(c(x_0_n,y_0_n,x_1_n,y_1_n),nrow = 1,ncol=4))
df_subset_n = as.data.frame(lapply(df[,4:7], normalize))
#print(head(df_subset_n))
knn_index = get.knnx(df_subset_n,coord,k)$nn.index
#print(knn_index)
score_count = 0
for (i in 1:k) {
#print(df[knn_index[1,i],])
score_count = score_count + df[knn_index[1,i],]$Possession_outcome
}
return(score_count/k)
}
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
View(head_N_arr)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
View(arr)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
library(parallel)
detectCores()
library(parallel)
ncores = detectCores()
data(df)
df = read.csv(FILENAME) %>% na.omit()
data(df)
cl = makeCluster(ncores)
clusterExport(cl,'df')
clusterExport(cl,'arr')
arr$Score_prob = lapply(head_arr,function(l) {
score_prob_calc(l[1],l[2],l[3],l[4],df,k)
})
arr = expand.grid(1:NROWS,1:NCOLS,1:NROWS,1:NCOLS)
colnames(arr) = c('x_0','y_0','x_1','y_1')
head_arr = arr[1:100,]
arr$Score_prob = lapply(t(head_arr),function(l) {
score_prob_calc(l[1],l[2],l[3],l[4],df,k)
})
head_arr$Score_prob = lapply(head_arr,function(l) {
score_prob_calc(l[1],l[2],l[3],l[4],df,k)
})
head_arr = t(arr[1:100,])
View(head_arr)
lapply(head_arr,function(l) {
score_prob_calc(l[1],l[2],l[3],l[4],df,k)
})
cl = makeCluster(ncores)
clusterExport(cl,'df')
clusterExport(cl,'arr')
head_arr$Score_prob = parApply(head_arr,function(l) {
score_prob_calc(l[1],l[2],l[3],l[4],df,k)
})
head_arr$Score_prob = parApply(cl=cl,1,head_arr,function(l) {
score_prob_calc(l[1],l[2],l[3],l[4],df,k)
})
head_arr$Score_prob = parApply(cl=cl,head_arr,1,function(l) {
score_prob_calc(l[1],l[2],l[3],l[4],df,k)
})
clusterExport(cl,'score_prob_calc')
head_arr$Score_prob = parApply(cl=cl,head_arr,1,function(l) {
score_prob_calc(l[1],l[2],l[3],l[4],df,k)
})
clusterExport(cl,'df')
clusterExport(cl,'arr')
clusterExport(cl,'score_prob_calc')
clusterExport(cl,'X_MIN')
clusterExport(cl,'X_MAX')
clusterExport(cl,'Y_MIN')
clusterExport(cl,'Y_MIN')
clusterExport(cl,'normalize')
head_arr$Score_prob = parApply(cl=cl,head_arr,1,function(l) {
score_prob_calc(l[1],l[2],l[3],l[4],df,k)
})
clusterExport(cl,'Y_MAX')
head_arr$Score_prob = parApply(cl=cl,head_arr,1,function(l) {
score_prob_calc(l[1],l[2],l[3],l[4],df,k)
})
library(FNN)
head_arr$Score_prob = parApply(cl=cl,head_arr,1,function(l) {
score_prob_calc(l[1],l[2],l[3],l[4],df,k)
})
head_arr$Score_prob = parApply(cl=cl,head_arr,1,function(l) {
library(FNN)
score_prob_calc(l[1],l[2],l[3],l[4],df,k)
})
clusterExport(cl,'k')
head_arr$Score_prob = parApply(cl=cl,head_arr,1,function(l) {
library(FNN)
score_prob_calc(l[1],l[2],l[3],l[4],df,k)
})
View(df_subset_n)
View(head_arr)
head_arr[1]
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
View(head_arr)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
warnings()
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
ncores = detectCores()
ncores
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/throw_score-%.R', echo=TRUE)
View(df_subset_n)
library(FNN)
library(reshape2)
library(stringr)
library(tidyverse)
library(plotly)
setwd('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/data/audl')
FILENAME = 'audl_possession_outcomes_train.csv'
k = 200
NROWS = 100
NCOLS = 50
df = read.csv(FILENAME)
## normalize to remove bias
normalize = function(a) {
return ((a - min(a)) / (max(a) - min(a))) }
X_MIN = min(df$x_0)
X_MAX = max(df$x_0)
Y_MIN = min(df$y_0)
Y_MAX = max(df$y_0)
arr = as.data.frame(matrix(nrow = NROWS,ncol=NCOLS))
## returns probability of scoring from a given coordinate based on knn
score_prob_calc = function(x,y,df,k) {
x_n = (x - X_MIN) / (X_MAX - X_MIN)
y_n = (y - Y_MIN) / (Y_MAX - Y_MIN)
coord = as.data.frame(matrix(c(x_n,y_n),nrow = 1,ncol=2))
df_subset_n = as.data.frame(lapply(df[,4:5], normalize))
print(head(df_subset_n))
knn_index = get.knnx(df_subset_n,coord,k)$nn.index
#print(knn_index)
score_count = 0
for (i in 1:k) {
#print(df[knn_index[1,i],])
score_count = score_count + df[knn_index[1,i],]$Possession_outcome
}
return(score_count/k)
}
## returns probability of scoring from a given coordinate based on knn
score_prob_calc = function(x,y,df,k) {
x_n = (x - X_MIN) / (X_MAX - X_MIN)
y_n = (y - Y_MIN) / (Y_MAX - Y_MIN)
coord = as.data.frame(matrix(c(x_n,y_n),nrow = 1,ncol=2))
df_subset_n = as.data.frame(lapply(df[,4:5], normalize))
print(head(df_subset_n))
knn_index = get.knnx(df_subset_n,coord,k)$nn.index
#print(knn_index)
score_count = 0
for (i in 1:k) {
#print(df[knn_index[1,i],])
score_count = score_count + df[knn_index[1,i],]$Possession_outcome
}
return(score_count/k)
}
View(arr)
View(df)
score_prob_calc(20,95,df,k)
## debugging
#score_prob_calc(20,95,df,k)
sub = as.data.frame(lapply(df[,4:5]))
## debugging
#score_prob_calc(20,95,df,k)
sub = df[,4:5]
View(sub)
## throw count heatmap
ggplot(sub,aes(x_0,y_0)) +
stat_bin2d(bins = 100) +
scale_fill_distiller(palette='Spectral', direction=-1) +
#scale_fill_continuous(limits=c(0, 50))
## Score % heatmap
p = ggplot(arr_melt,aes(x = X, y = Y, z=Score_Prob, fill = Score_Prob)) +
geom_tile() +
geom_hline(yintercept=80) +
scale_fill_distiller(palette='Spectral', direction=-1,name="Score Probability") +
scale_y_continuous(breaks = c(0,20,40,60,80,100),limits=c(0,100)) +
ylab('Distance from Endzone') +
xlab('Target Endzone') +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
## throw count heatmap
ggplot(sub,aes(x_0,y_0)) +
stat_bin2d(bins = 100) +
scale_fill_distiller(palette='Spectral', direction=-1) +
#scale_fill_continuous(limits=c(0, 50))
## Score % heatmap
p = ggplot(arr_melt,aes(x = X, y = Y, z=Score_Prob, fill = Score_Prob)) +
geom_tile() +
geom_hline(yintercept=80) +
scale_fill_distiller(palette='Spectral', direction=-1,name="Score Probability") +
scale_y_continuous(breaks = c(0,20,40,60,80,100),limits=c(0,100)) +
ylab('Distance from Endzone') +
xlab('Target Endzone') +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
## throw count heatmap
ggplot(sub,aes(x_0,y_0)) +
stat_bin2d(bins = 100) +
scale_fill_distiller(palette='Spectral', direction=-1)
## throw count heatmap
ggplot(sub,aes(x_0,y_0)) +
stat_bin2d(bins = 100) +
scale_fill_distiller(palette='Spectral', direction=-1)
## throw count heatmap
ggplot(sub,aes(x_0,y_0)) +
stat_bin2d(bins = 100) +
scale_fill_distiller(palette='Spectral', direction=-1) +
+scale_fill_continuous(limits=c(0, 50))
## throw count heatmap
ggplot(sub,aes(x_0,y_0)) +
stat_bin2d(bins = 100) +
scale_fill_distiller(palette='Spectral', direction=-1) +
scale_fill_continuous(limits=c(0, 50))
## throw count heatmap
ggplot(sub,aes(x_0,y_0)) +
stat_bin2d(bins = 100) +
scale_fill_distiller(palette='Spectral', direction=-1,limits=c(0,50))
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/base_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/base_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/base_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/base_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/base_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/base_score-%.R', echo=TRUE)
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/base_score-%.R', echo=TRUE)
-25:25
source('C:/Users/hiros/Desktop/Storage/documents/Ultimate-Frisbee-Possession-Analysis/scripts/base_score-%.R', echo=TRUE)
